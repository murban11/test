services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - igaku-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 3

  user:
    container_name: igaku-user
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "user-service/air.user.toml"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=igaku-user-db
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
    ports:
      - 8080:8080
    volumes:
      - ./user-service:/app/user-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      user-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  user-db:
    container_name: igaku-user-db
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
    ports:
      - 5432:5432
    networks:
      - igaku-network
    healthcheck:
      test: pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}
      interval: 2s
      timeout: 2s
      retries: 3

  auth:
    container_name: igaku-auth
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "auth-service/air.auth.toml"]
    env_file:
      - .env
    ports:
      - 8081:8080
    volumes:
      - ./auth-service:/app/auth-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  encounter:
    container_name: igaku-encounter
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "encounter-service/air.encounter.toml"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=igaku-encounter-db
      - POSTGRES_DB=${ENCOUNTER_DB_NAME}
      - POSTGRES_USER=${ENCOUNTER_DB_USER}
      - POSTGRES_PASSWORD=${ENCOUNTER_DB_PASSWORD}
    ports:
      - 8082:8080
    volumes:
      - ./encounter-service:/app/encounter-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      encounter-db:
        condition: service_healthy

  encounter-db:
    container_name: igaku-encounter-db
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${ENCOUNTER_DB_NAME}
      - POSTGRES_USER=${ENCOUNTER_DB_USER}
      - POSTGRES_PASSWORD=${ENCOUNTER_DB_PASSWORD}
    ports:
      - 5433:5432
    networks:
      - igaku-network
    healthcheck:
      test: pg_isready -U ${ENCOUNTER_DB_USER} -d ${ENCOUNTER_DB_NAME}
      interval: 2s
      timeout: 2s
      retries: 3

networks:
  igaku-network:
    driver: bridge

volumes:
  rabbitmq_data:
  rabbitmq_logs:
  go-mod-cache:
  go-build-cache:
