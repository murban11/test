services:
  rabbitmq:
    image: rabbitmq:management
    container_name: igaku-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - igaku-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: igaku-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - 9200:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - igaku-network

  logstash:
    image: docker.elastic.co/logstash/logstash:9.0.0
    container_name: igaku-logstash
    ports:
      - 5044:5044 # Beats port
      - 12201:12201/udp # GELF input port
      - 9600:9600
    volumes:
      - ./config/logstash/pipeline/:/usr/share/logstash/pipeline/:ro
    networks:
      - igaku-network
    healthcheck:
      test: ["CMD", "curl", "-s", "-XGET", "localhost:9600"]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    container_name: igaku-kibana
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
      - xpack.encryptedSavedObjects.encryptionKey=${SECRET_KEY}
    networks:
      - igaku-network

  user:
    container_name: igaku-user
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "user-service/air.user.toml"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=igaku-user-db
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    ports:
      - 8080:8080
    volumes:
      - ./user-service:/app/user-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      user-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      logstash:
        condition: service_healthy
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:12201"
        tag: "igaku-user-service"

  user-db:
    container_name: igaku-user-db
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
    ports:
      - 5432:5432
    networks:
      - igaku-network
    healthcheck:
      test: pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}
      interval: 2s
      timeout: 2s
      retries: 3

  auth:
    container_name: igaku-auth
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "auth-service/air.auth.toml"]
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    env_file:
      - .env
    ports:
      - 8081:8080
    volumes:
      - ./auth-service:/app/auth-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      logstash:
        condition: service_healthy
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:12201"
        tag: "igaku-auth-service"

  mail:
    container_name: igaku-mail
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "mail-service/air.mail.toml"]
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    env_file:
      - .env
    ports:
      - 8083:8080
    volumes:
      - ./mail-service:/app/mail-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      logstash:
        condition: service_healthy
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:12201"
        tag: "igaku-mail-service"

  encounter:
    container_name: igaku-encounter
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "encounter-service/air.encounter.toml"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=igaku-encounter-db
      - POSTGRES_DB=${ENCOUNTER_DB_NAME}
      - POSTGRES_USER=${ENCOUNTER_DB_USER}
      - POSTGRES_PASSWORD=${ENCOUNTER_DB_PASSWORD}
    ports:
      - 8082:8080
    volumes:
      - ./encounter-service:/app/encounter-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      encounter-db:
        condition: service_healthy
      logstash:
        condition: service_healthy
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:12201"
        tag: "igaku-encounter-service"
    profiles:
      - disabled

  encounter-db:
    container_name: igaku-encounter-db
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${ENCOUNTER_DB_NAME}
      - POSTGRES_USER=${ENCOUNTER_DB_USER}
      - POSTGRES_PASSWORD=${ENCOUNTER_DB_PASSWORD}
    ports:
      - 5433:5432
    networks:
      - igaku-network
    healthcheck:
      test: pg_isready -U ${ENCOUNTER_DB_USER} -d ${ENCOUNTER_DB_NAME}
      interval: 2s
      timeout: 2s
      retries: 3
    profiles:
      - disabled

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: igaku-swagger-ui
    ports:
      - 8090:8080
    env_file:
      - config/swagger/env
    depends_on:
      - auth
      - mail
      - user
    networks:
      - igaku-network

networks:
  igaku-network:
    driver: bridge

volumes:
  rabbitmq_data:
  rabbitmq_logs:
  go-mod-cache:
  go-build-cache:
  esdata:
